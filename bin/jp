#!/usr/bin/env python

import sys
import json
import argparse

import jmespath
from jmespath import exceptions
from jmespath.compat import OrderedDict


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('expression')
    parser.add_argument('-o', '--ordered', action='store_true',
                        help='Preserve the order of hash keys, which '
                             'are normally unordered.')
    parser.add_argument('-f', '--filename',
                        help=('The filename containing the input data.  '
                              'If a filename is not given then data is '
                              'read from stdin.'))
    parser.add_argument('--ast', action='store_true',
                        help=('Pretty print the AST, do not search the data.'))
    parser.add_argument('-r', '--raw-output', action='store_true',
                        help=('If the result is a string then it '
                              'will be written directly to standard output '
                              'rather than being formatted as a JSON string '
                              'with quotes. This can be useful for talking '
                              'to non-JSON-based systems.'))
    parser.add_argument('-c', '--compact-output', action='store_true',
                        help=('By default, JSON output is pretty-printed. '
                              'Using this option will result in more compact '
                              'output by instead putting each JSON object on '
                              'a single line.'))
    parser.add_argument('-l', '--linemode', action='store_true',
                        help=('Treat each line in input as a separate doc.'))
    args = parser.parse_args()
    expression = args.expression
    if args.ast:
        # Only print the AST
        expression = jmespath.compile(args.expression)
        sys.stdout.write(str(expression))
        sys.stdout.write('\n')
        return 0

    try:
        stream = open(args.filename, 'r') if args.filename else sys.stdin
        object_pairs_hook = OrderedDict if args.ordered else None
        indent = None if args.compact_output else 4
        for line in stream if args.linemode else [stream]:
            data = json.loads(line, object_pairs_hook=object_pairs_hook)
            result = jmespath.search(expression, data)
            if args.raw_output and isinstance(result, basestring):
                sys.stdout.write(result)
            else:
                sys.stdout.write(json.dumps(result, indent=indent))
            sys.stdout.write('\n')
        stream.close()
        return 0
    except exceptions.ArityError as e:
        sys.stderr.write("invalid-arity: %s\n" % e)
        return 1
    except exceptions.JMESPathTypeError as e:
        sys.stderr.write("invalid-type: %s\n" % e)
        return 1
    except exceptions.UnknownFunctionError as e:
        sys.stderr.write("unknown-function: %s\n" % e)
        return 1
    except exceptions.LexerError as e:
        sys.stderr.write("syntax-error: %s\n" % e)
        return 1
    except exceptions.ParseError as e:
        sys.stderr.write("syntax-error: %s\n" % e)
        return 1


if __name__ == '__main__':
    sys.exit(main())
